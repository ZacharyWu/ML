Version	Python version	Compiler	Build tools	cuDNN	CUDA
tensorflow-2.0.0	2.7, 3.3-3.7	GCC 7.3.1	Bazel 0.26.1	7.4	10.0
tensorflow_gpu-1.14.0	2.7, 3.3-3.7	GCC 4.8	Bazel 0.24.1	7.4	10.0
tensorflow_gpu-1.13.1	2.7, 3.3-3.7	GCC 4.8	Bazel 0.19.2	7.4	10.0


1 Install CUDA 10.0 + cuDNN 7.4.2 + NCCL default version + TensorFlow 1.13.2 + Python3.6

using Python3 and pip3
---updated: 2019.8.11

Ubuntu
To remove CUDA Toolkit:
$ sudo apt-get --purge remove "*cublas*" "cuda*"
To remove NVIDIA Drivers:
$ sudo apt-get --purge remove "*nvidia*"
Only Cuda 10.0 supported

1.1 Install CUDA 10.0 (This step will install nvidia driver aotumatically)
1.1.1 Install gcc: 
sudo apt-get install gcc

1.1.2 Download package. For me it was Linux / x86_64 / Ubuntu / 18.04 /deb (local)
1.1.3 Install CUDA by running following commands
sudo dpkg -i cuda-repo-ubuntu1804-10-0-local-10.0.130-410.48_1.0-1_amd64.deb
sudo apt-key add /var/cuda-repo-10-0-local-10.0.130-410.48/7fa2af80.pub
sudo apt-get update
sudo apt-get install cuda

1.1.4 After installation is complete, add PATH variable by adding following line to the bashrc by running
nano ~/.bashrc (in the home directory, which is hidden)
#adding 
export PATH=/usr/local/cuda-10.0/bin${PATH:+:${PATH}} 
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64
export PATH=/usr/local/cuda/bin${PATH:+:${PATH}}
export PATH=/usr/local/cuda/lib64${PATH:+:${PATH}}
export LD_LIBRARY_PATH=/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH
export PATH="$PATH:$HOME/bin"
export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH
#at the end of file. Save and exit.

1.1.5 Check driver version and CUDA toolkit to ensure that everything went well
cat /proc/driver/nvidia/version
nvcc -V

"sudo reboot" Please.

1.1.6 You might also want to build CUDA samples and run it. It will take a while. For that you need to jump to CUDA sample directory. For me it is 
cd /usr/local/cuda-10.0/samples 
#and run 
sudo make (make -k to build some packages skip others, which needs 3rd party library)
#After that go to built sources 
cd /usr/local/cuda-10.0/samples/bin/x86_64/linux/release
#and execute 
./deviceQuery 
#and 
./bandwidthTest
#After test feel free to remove built samples.

1.2 Install cuDNN 7.4.2 (download 4 files:1tgz+3deb)

#Run tar:
tar -xf cudnn-10.0-linux-x64-v7.4.2.24.tgz
sudo cp -R cuda/include/* /usr/local/cuda-10.0/include
sudo cp -R cuda/lib64/* /usr/local/cuda-10.0/lib64

#Run following commands in he folders with deb files:
#sudo dpkg -i libcudnn7_7.3.0.29-1+cuda10.0_amd64.deb
#sudo dpkg -i libcudnn7-dev_7.3.0.29-1+cuda10.0_amd64.deb
#sudo dpkg -i libcudnn7-doc_7.3.0.29-1+cuda10.0_amd64.deb

_____2019.8.11 Update_____
sudo dpkg -i libcudnn7_7.4.2.24-1+cuda10.0_amd64.deb 
sudo dpkg -i libcudnn7-dev_7.4.2.24-1+cuda10.0_amd64.deb
sudo dpkg -i libcudnn7-doc_7.4.2.24-1+cuda10.0_amd64.deb 

#The installation is completed. Let’s verify it by following instructions or run:
cp -r /usr/src/cudnn_samples_v7/ $HOME
cd $HOME/cudnn_samples_v7/mnistCUDNN
make clean && make
./mnistCUDNN
#If cuDNN was installed properly you will see a message: Test passed
#Feel free to remove copied files from HOME/cudnn_samples_v7

1.3 Install NCCL 2.3.5
NCCL is used to handle calculations on multiple GPU simultaneously. If you will use a single GPU, you can skip this step. Otherwise download Network Installer and run
sudo dpkg -i nccl-repo-<version>.deb
sudo apt install libnccl2 libnccl-dev

2 Install Bazel 0.18 (0.28)

#Step 1: Install required packages
sudo apt-get install pkg-config zip g++ zlib1g-dev unzip python (old 0.21, use this)
sudo apt-get install pkg-config zip g++ zlib1g-dev unzip python3
#Step 2: Download Bazel
Next, download the Bazel binary installer named bazel-<version>-installer-linux-x86_64.sh from the Bazel releases page on GitHub.
#Step 3: Run the installer
chmod +x bazel-0.18.0-installer-linux-x86_64.sh
./bazel-0.18.0-installer-linux-x86_64.sh --user
#Step 4: Set up your environment
export PATH="$PATH:$HOME/bin"
#You can also add this command to your ~/.bashrc file.
#To verify that the bazel installation is completed, bazel version. You might also see few warnings. That is OK.

3 Build from source (https://www.tensorflow.org/install/source?hl=zh_cn)

3.1 Install Python and the TensorFlow package dependencies
sudo apt install python-dev python-pip  # or python3-dev python3-pip
pip install -U --user pip six numpy wheel setuptools mock future>=0.17.1
pip install -U --user keras_applications==1.0.6 --no-deps
pip install -U --user keras_preprocessing==1.0.5 --no-deps

3.2 Download the TensorFlow source code and Build
3.2.1 Download source codes.
git clone https://github.com/tensorflow/tensorflow.git
cd tensorflow
git checkout r1.13
./configure

Flowing step for python2.7

###Configure TensorFlow build by running ./configure. 
In my case I’ve used default values except questions regarding:

Hadoop File System support — NO
Apache Kafka Platform support — NO
CUDA support — YES
CUDA version — 10.0
cuDNN version — 7.4.2
NCCL — 1.3

#For python3, addtionally change:
Please specify the location of python. [Default is /usr/bin/python]: /usr/bin/python3

Found possible Python library paths:
  /home/zachary/venv2/lib/python2.7/site-packages/tensorflow/models/research/slim
  /usr/lib/python3/dist-packages
  /usr/local/lib/python3.6/dist-packages

Please input the desired Python library path to use.  Default is [/home/zachary/venv2/lib/python2.7/site-packages/tensorflow/models/research/slim]
/usr/local/lib/python3.6/dist-packages


####################################### Optional ###########################################

3.2.2 Test it with bazel.
bazel test -c opt -- //tensorflow/... -//tensorflow/compiler/... -//tensorflow/contrib/lite/... 
#Well, it was processing about an hour on my machine. As a result I have about 60 failed test results but it doesn’t impact build process.

####################################### Optional ###########################################

3.2.3 Bazel build
bazel build --config=opt --config=cuda //tensorflow/tools/pip_package:build_pip_package


3.2.4 Build the package and install TensorFlow. 
#Step1 Build the package
./bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg

#Be ready to entertain yourself for an hour while building process is in progress. As a result pip package will be placed at /tmp/tensorflow_pkg. 
#We are almost done — run from your venv and enjoy

_________Can be Skipped if you want to install on real machine, not virtual environment________
###Install the Python development environment on your system###
python3 --version
pip3 --version
virtualenv --version
sudo apt update
sudo apt install python3-dev python3-pip
sudo pip3 install -U virtualenv  # system-wide install
###Create a virtual environment (recommended)### 
virtualenv --system-site-packages -p python3 ./venv
source ./venv/bin/activate  # sh, bash, ksh, or zsh
pip install --upgrade pip
pip list  # show packages installed within the virtual environment
_______________________________________________________________________________________________


#Step2 Install the package
#pip install /tmp/tensorflow_pkg/tensorflow-version-tags.whl
#Python2
sudo pip install /tmp/tensorflow_pkg/tensorflow-version-cp27-cp27mu-linux_x86_64.whl
#Python3: (use this one for Python3)
sudo pip3 install /tmp/tensorflow_pkg/tensorflow-1.13.2-cp36-cp36m-linux_x86_64.whl 
#Installing collected packages: markdown, tensorboard, astor, termcolor, tensorflow
Successfully installed astor-0.8.0 markdown-3.1.1 tensorboard-1.13.1 tensorflow-1.13.2 termcolor-1.1.0

#Verify the install:
python3 -c "import tensorflow as tf; tf.enable_eager_execution(); print(tf.reduce_sum(tf.random_normal([1000, 1000])))"

That is it. TensorFlow with GPU support is up and running!

ImportError: No module named mock

ModuleNotFoundError: No module named 'keras_preprocessing'
pip3 install keras --user


Traceback (most recent call last):
  File "/usr/bin/pip3", line 9, in <module>
    from pip import main
ImportError: cannot import name 'main'

We can clear the error by modifying the pip file.
Check the location of the file:
$ which pip
path -> /usr/bin/pip

Go to that location(/usr/bin/pip) and open terminal
Enter: $ sudo nano pip
You can see:

import sys
from pip import main
if __name__ == '__main__':
     sys.exit(main())

Change to:

import sys
from pip import __main__
if __name__ == '__main__':
     sys.exit(__main__._main())

then ctrl + o write the changes and exit


ERROR: /home/zachary/tensorflow/tensorflow/stream_executor/cuda/BUILD:74:1: C++ compilation of rule '//tensorflow/stream_executor/cuda:cuda_driver' failed (Exit 1)
In file included from tensorflow/stream_executor/cuda/cuda_driver.cc:16:0:
./tensorflow/stream_executor/cuda/cuda_driver.h:69:25: error: 'CUdevice' was not declared in this scope
   static port::StatusOr<CUdevice> DeviceFromContext(CudaContext* context);
Solved?
tar -xf cudnn-10.0-linux-x64-v7.3.1.20.tgz
sudo cp -R cuda/include/* /usr/local/cuda-10.0/include
sudo cp -R cuda/lib64/* /usr/local/cuda-10.0/lib64

ERROR: /home/zachary/tensorflow/tensorflow/cc/profiler/BUILD:9:1: Linking of rule '//tensorflow/cc/profiler:profiler_test_gpu' failed (Exit 1)


